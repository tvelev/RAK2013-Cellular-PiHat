#!/bin/bash

do_setup_admin_password() {
    dialog --title "Setup pi password" --msgbox "You will be asked to enter a new password." 5 60
    passwd pi
    RET=$?
    if [ $RET -eq 0 ]; then
        dialog --title "Setup pi password" --msgbox "Password has been changed succesfully." 5 60
        do_main_menu
    fi
}


enable_ap_mode()
{
    systemctl enable create_ap

    if [ -f "/sbin/wpa_supplicant" ]; then
        mv /sbin/wpa_supplicant /sbin/wpa_supplicant_bak
    fi

    dialog --title "Enable AP Mode" --msgbox "The AP mode will active after the operating system reboot." 5 70
}

enable_wifi_mode()
{
    systemctl disable create_ap

    if [ -f "/sbin/wpa_supplicant_bak" ]; then
        mv /sbin/wpa_supplicant_bak /sbin/wpa_supplicant
    fi

    dialog --title "Enable Wifi Mode" --msgbox "The Wifi mode will active after the operating system reboot." 5 70
}

add_new_ssid()
{
    rm /tmp/wifi_ssid -rf
    mkfifo /tmp/wifi_ssid
    rm /tmp/wifi_pwd -rf
    mkfifo /tmp/wifi_pwd
    dialog --title "Configure WIFI" --nocancel --inputbox "SSID:" 10 40  2> /tmp/wifi_ssid &
    if [ $RET -ne 0 ]; then
    	do_main_menu
    fi
    dialog --title "Configure WIFI" --nocancel --inputbox "Password:" 10 40  2> /tmp/wifi_pwd &
    if [ $RET -ne 0 ]; then
    	do_main_menu
    fi
    
    linenum=`sed -n '/update_config/=' /etc/wpa_supplicant/wpa_supplicant.conf`
    let linenum=linenum+1
    
    wifi_ssid="$( cat /tmp/wifi_ssid  )"
    wifi_pwd="$( cat /tmp/wifi_pwd  )"
    ssid_len=${#wifi_ssid}
    pwd_len=${#wifi_pwd}
    
    if [ $ssid_len -eq 0 ]; then
    	dialog --title "Configure WIFI" --msgbox "SSID cannot be empty." 5 28
    	do_main_menu
    fi
    
    if [ $pwd_len -eq 0 ] || [ $pwd_len -lt 8 ] ||[ $pwd_len -gt 63 ]; then
    	dialog --title "Configure WIFI" --msgbox "Invalid passphrase length ${pwd_len} (expected: 8..63)." 5 52
 #   	do_main_menu
    else
        sed -i "${linenum}inetwork={\nssid=\"${wifi_ssid}\"\nkey_mgmt=WPA-PSK\npsk=\"${wifi_pwd}\"\n}" /etc/wpa_supplicant/wpa_supplicant.conf
    fi
}

do_configure_wifi() {
    FUN=$(dialog --title "Configure wifi" --cancel-label "Quit" --menu "Configuration options:" 12 60 20 \
    	1 "Enable AP Mode/Disable Wifi Mode"	\
        2 "Enable Wifi Mode/Disable AP Mode" \
        3 "Add New SSID for Wifi" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        clear
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            1) enable_ap_mode;;
            2) enable_wifi_mode;;
            3) add_new_ssid;;
        esac
    fi

    do_main_menu
}

enable_2013()
{
    linenum=`sed -n '/wait_pi_hat_and_ppp/=' /etc/rc.local`
	if [ ! -n "$linenum" ]; then
		set -a line_array
		line_index=0
		for linenum in `sed -n '/exit 0/=' /etc/rc.local`; do line_array[line_index]=$linenum; let line_index=line_index+1; done
		sed -i "${line_array[${#line_array[*]} - 1]}i/opt/ttn-gateway/rak_pppd/wait_pi_hat_and_ppp.sh" /etc/rc.local
	fi
	dialog --title "Enable LTE Module" --msgbox "The LTE module will power on after the operating system starts." 5 70
	do_main_menu
}

disable_2013()
{
    linenum=`sed -n '/wait_pi_hat_and_ppp/=' /etc/rc.local`
	if [ -n "$linenum" ]; then
		sed  -i "${linenum}d" /etc/rc.local
	fi
	dialog --title "Disable LTE Module" --msgbox "The LTE module will not power on after the operating system starts." 5 71
	do_main_menu
}

active_2013()
{
	/opt/ttn-gateway/rak_pppd/pi-hat.sh
	/opt/ttn-gateway/rak_pppd/enable_lte_module.sh
	declare -i PERCENT=0
    (
        for I in {1..100}; do
            echo $PERCENT
            sleep 0.12
        let PERCENT+=1
        done
    )| dialog --title "Active LTE Module" --gauge "Activing..." 6 50 0
    
    dialog --title "Active LTE Module" --msgbox "The LTE module is actived." 5 36
    do_main_menu
}

rak2013()
{
    FUN=$(dialog --title "LTE Module" --cancel-label "Quit" --menu "Configuration options:" 18 80 20 \
    	1 "Active LTE Module"	\
        2 "Enable LTE Module" \
        3 "Disable LTE Module" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        clear
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            1) active_2013;;
            2) enable_2013;;
            3) disable_2013;;
        esac
    fi
    
}

set_apn_name()
{
	rm /tmp/apn_name -rf
    mkfifo /tmp/apn_name
    rm /tmp/band_speed -rf
    mkfifo /tmp/band_speed
    dialog --title "APN Name" --nocancel --inputbox "APN Name:" 10 40 "HOLOGRAM" 2> /tmp/apn_name & 
    dialog --title "Baud Speed" --nocancel --inputbox "Baud Speed:" 10 40 "115200" 2> /tmp/band_speed &
    RET=$?
	
    if [ $RET -eq 1 ]; then
        do_main_menu
    elif [ $RET -eq 0 ]; then
        apn_name="$( cat /tmp/apn_name  )" 
        band_speed="$( cat /tmp/band_speed  )" 
        /opt/ttn-gateway/rak_pppd/ppp-creator.sh "${apn_name}" ttyAMA0 ${band_speed} >/dev/null
        echo "
#!/bin/sh

cd /opt/ttn-gateway/rak_pppd
./pi-hat.sh &
/opt/ttn-gateway/rak_pppd/enable_lte_module.sh
sleep 5
./wait_pi_hat_and_ppp ${band_speed} &
        " >  /opt/ttn-gateway/rak_pppd/wait_pi_hat_and_ppp.sh
        chmod 755 /opt/ttn-gateway/rak_pppd/wait_pi_hat_and_ppp.sh
        rm /tmp/apn_name -rf
        rm /tmp/band_speed -rf
    fi
    do_main_menu
}

do_main_menu() {

    GATEWAY_EUI_NIC="eth0"
    if [[ `grep "$GATEWAY_EUI_NIC" /proc/net/dev` == "" ]]; then
        GATEWAY_EUI_NIC="wlan0"
    fi

    if [[ `grep "$GATEWAY_EUI_NIC" /proc/net/dev` == "" ]]; then
       echo "ERROR: No network interface found. Cannot set gateway ID."
    fi
    GATEWAY_EUI=$(ip link show $GATEWAY_EUI_NIC | awk '/ether/ {print $2}' | awk -F\: '{print $1$2$3"FFFE"$4$5$6}')
    GATEWAY_EUI=${GATEWAY_EUI^^}

    VER=`cat /usr/bin/rak-version.txt`
    FUN=$(dialog --title "Rak Gateway (Gateway ID:$GATEWAY_EUI  Version: $VER)" --cancel-label "Quit" --menu "Configuration options:" 14 80 20 \
        1 "Set pi password" \
        2 "Configure WIFI" \
        3 "Configure APN name" \
        4 "Configure LTE Module"	\
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        clear
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            1) do_setup_admin_password;;
            2) do_configure_wifi;;
            3) set_apn_name;;
            4) rak2013;;
        esac
    fi
}


if [ $(id -u) -ne 0 ]; then
  printf "Script must be run as root. Try 'sudo gateway-config'\n"
  exit 1
fi

do_main_menu

